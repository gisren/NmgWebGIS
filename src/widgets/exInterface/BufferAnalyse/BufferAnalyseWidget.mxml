<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:viewer="com.esri.viewer.*"
				   xmlns:pageNavigation="com.mapUni.UtilComponent.pageNavigation.*"
				   widgetConfigLoaded="init()" xmlns:BufferAnalyse="widgets.exInterface.BufferAnalyse.*"    >
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.events.IdentifyEvent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.supportClasses.LayerInfo;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.tasks.IdentifyTask;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.BufferParameters;
			import com.esri.ags.tasks.supportClasses.IdentifyParameters;
			import com.esri.ags.tasks.supportClasses.IdentifyResult;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			
			import flash.external.ExternalInterface;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.messaging.channels.StreamingAMFChannel;
			import mx.rpc.events.FaultEvent;
			
			import org.osmf.layout.AbsoluteLayoutFacet;

			private var layerInfos:Array;
			private var defaultDistance:String;
			private var dataArr:ArrayCollection;
			private var mapServerUrl:String;
			private var mapunit:String;
			private var annlysePoint:MapPoint;
			private var anlyseLayer:GraphicsLayer;
			private var bufferLayer:GraphicsLayer;
			private var results:Array;
			private var geometryservice:String;
			private var lineColor:String;
			private var  lineAlpha:String;
			private var  lineWidth:String;
			private var fillColor:String;
			private var  fillAlpha:String;
			private var pageSize:String;
			
			
			
			public function GetMapServerURL(mapServerURL:String):String
			{
				var lyrURL:String = mapServerURL;
				
				var queryParams:String = ExternalInterface.call("window.location.href.toString",1);
				var paramsArray:Array = queryParams.split('/');
				var urlArray:Array = lyrURL.split('/');
				
				
				var url2:String = "http://" + paramsArray[2];
				for(var n:int=3;n<urlArray.length;n++)
				{
					url2=url2+"/" + urlArray[n];
				}
				
				//var url2:String = "http://" + paramsArray[2] + "/" + urlArray[3] + "/" + urlArray[4] +"/" + urlArray[5] + "/" +urlArray[6] +"/" +urlArray[7];
				
				return  url2;
			}
			private function init():void
			{
				
				
				layerInfos = new Array();				
				
				//从配置文件中取出要查询的图层
				if (configXML) 
				{		
					defaultDistance = configXML.elements("baseconfig").attribute("defaultbuffdistance").toString();
					var layername:String =configXML.elements("baseconfig").attribute("resultLayer").toString(); 
					var bufferlayername:String =configXML.elements("baseconfig").attribute("bufferLayer").toString(); ;					
					bufferLayer =new GraphicsLayer();
					map.addLayer(bufferLayer);		
					anlyseLayer = new GraphicsLayer();
					//anlyseLayer.minScale=Number(configXML.elements("baseconfig").attribute("layerMinScale").toString()); 
					//anlyseLayer.maxScale=Number(configXML.elements("baseconfig").attribute("layerMaxScale").toString()); 
					map.addLayer(anlyseLayer);		
					this.txtBufferDistance.text = this.defaultDistance;
					mapServerUrl = configXML.elements("baseconfig").attribute("mapServerUrl").toString();
					
					mapServerUrl=GetMapServerURL(mapServerUrl);
					identifyask.url = this.mapServerUrl;
					
					
					
					//Alert.show(this.mapServerUrl);
					mapunit = configXML.elements("baseconfig").attribute("mapunit").toString();
					geometryservice = configXML.elements("baseconfig").attribute("geomertryservice").toString();
		
					geometryservice=GetMapServerURL(geometryservice);
					
			
					geometrySer.url=geometryservice;
					
					//Alert.show(geometryservice);
					
					geometrySer.url =geometryservice;
					lineColor = configXML.elements("baseconfig").attribute("lineColor").toString();
					lineAlpha = configXML.elements("baseconfig").attribute("lineAlpha").toString();
					lineWidth = configXML.elements("baseconfig").attribute("lineWidth").toString();
					fillColor = configXML.elements("baseconfig").attribute("fillColor").toString();
					fillAlpha = configXML.elements("baseconfig").attribute("fillAlpha").toString();
					pageSize = configXML.elements("baseconfig").attribute("pageSize").toString();
					this.hcImg.source = configXML.elements("Image").attribute("hcImg").toString();
					this.datagridImg.source = configXML.elements("Image").attribute("gridImg").toString();
					this.clearImg.source = configXML.elements("Image").attribute("clearImg").toString();
					var iCount:int = configXML.elements("layers").child("layer").length();			
					if(iCount >0)
					{
						var xmllist:XMLList = configXML.elements("layers").child("layer");
						for(var i:int = 0 ; i < iCount;i++)
						{
							var layerinfo:XmlLayerInfo = new XmlLayerInfo();
							layerinfo.layerName =  xmllist[i].attribute("name").toString();
							layerinfo.layerID = Number(xmllist[i].attribute("idno").toString());
							layerinfo.img =  xmllist[i].attribute("img").toString();
							layerinfo.imgHeight = xmllist[i].attribute("imgHeight").toString();
							layerinfo.imgWidth = xmllist[i].attribute("imgWidth").toString();
							var iFieldCount:int = xmllist[i].elements("field").length();	
							layerinfo.fields = new Array();
							if(iFieldCount > 0)
							{
								var fieldxmllst:XMLList = xmllist[i].child("field");
								for(var j:int=0;j<iFieldCount;j++)
								{
									
									var field:LayerFieldInfo =new LayerFieldInfo();
									field.fieldName  =fieldxmllst[j].attribute("name").toString();
									field.description  =fieldxmllst[j].attribute("description").toString();
									layerinfo.fields.push(field);
								}
							}
							layerInfos.push(layerinfo);
							var ck:ListItemRender = new ListItemRender();
							ck.labelname =layerinfo.layerName;
							ck.selected = true;
							ck.labelid = layerinfo.layerID;
							ck.analyselayer = this.anlyseLayer;
							this.listGroup.addElement(ck);
							
						}
						
					}
				}
				
				ExternalInterface.addCallback("Analyse",Analysetest);
			}
			public function ClearResults()
			{
				if(anlyseLayer != null)
					anlyseLayer.clear();
			}
			//根据x,y进行缓冲分析
			public function  Analysetest(value:String):void
			{
				
				if(value!="")
				{
				
				bufferWidgetTmp.visible = true;
				ViewerContainer.dispatchEvent(new AppEvent(AppEvent.WIDGET_RUN, this.widgetId));
				//bufferWidgetTmp
				if(value==null || value == "")
					return;
				var values:Array = value.split(',');
				if(values.length !=2)
					return;
				annlysePoint = new MapPoint(Number(values[0]),Number(values[1]));
				}
				//annlysePoint = new MapPoint(Number(x),Number(y));
				//开始查询
			}
			
			

			//根据输入的值进行缓冲查询
			protected function btnAnalyse_clickHandler(event:MouseEvent):void
			{
				Alert.show("输入的缓冲距离有错误，请重新输入!","错误提示");
				
			}
			



			protected function identifyask_executeCompleteHandler(event:IdentifyEvent):void
			{
				results= new Array();
				var iCount:Number = event.identifyResults.length;
				for each(var result:IdentifyResult in event.identifyResults)
				{
					var graphic:Graphic= new Graphic();
					graphic.attributes = result.feature.attributes;
					graphic.geometry = result.feature.geometry;
					//根据不同的图层加载不同的图标
					var info:XmlLayerInfo = getInfoByLayerID(result.layerId);
					var resultSymbol:PictureMarkerSymbol=new PictureMarkerSymbol(info.img);	
					resultSymbol.height=Number(info.imgHeight);
					resultSymbol.width=Number(info.imgWidth);
					graphic.symbol = resultSymbol;
					graphic.attributes["distance"] =GetDistance(this.annlysePoint,graphic.geometry as MapPoint);
					graphic.attributes["layerid"] = result.layerId;
					graphic.attributes["image"] = info.img;
					results.push(graphic);
					graphic.addEventListener(MouseEvent.CLICK, onGraphicClick);
					anlyseLayer.add(graphic);
					
					
				}
				results.sort(sortOnObjDistance);				
				resultValue.pageCount = Number(pageSize);
				resultValue.map = map;
				resultValue.xmlInfos = this.layerInfos;
				resultValue.initData(results);
			}
			//鼠标点击事件
			private function onGraphicClick(event:MouseEvent):void
			{
				var graphic:Graphic = event.currentTarget as Graphic;	
				if(graphic==null||graphic.attributes == null  )
					return;
				
				var winContent:BufferInfoWindow = new BufferInfoWindow();
				var obj:Object = this.GetInfoString(graphic);
				if(obj !=null)
				{
					winContent.title =obj.title;
					winContent.content = obj.att;
					winContent.grachic = graphic;		
					map.infoWindow.content = winContent;
					map.infoWindow.show(graphic.geometry as MapPoint);
				}
			}
			//将信息组合成一个字符串
			private function GetInfoString(graphic:Graphic):Object
			{
				var obj:Object = new Object();
				if(graphic != null)
				{
					var layerid:Number =Number(graphic.attributes["layerid"].toString());
					var info:XmlLayerInfo = getInfoByLayerID(layerid);
					var att:String = "";	
					var title:String="";
					if(info.fields.length <=0 )
					{	
						att ="";
					}
					else
					{
						for(var i:int=0;i<info.fields.length;i++)
						{
							var field:LayerFieldInfo =info.fields[i] as LayerFieldInfo;
							att =att+ field.description+":"+graphic.attributes[field.fieldName]+"\r\n";
							if(i==0)
							{
								title = graphic.attributes[field.fieldName].toString();
							}
						}
						obj.title=title;
						obj.att=att;
					}
					return obj;
				}
				return null;
			}
			//根据距离排序
			private function sortOnObjDistance(a:Graphic,b:Graphic):Number
			{
				var aDis:Number = Number(a.attributes["distance"].toString());
				var bDis:Number = Number(b.attributes["distance"].toString());
				if(aDis > bDis)
				{
					return 1;
				}
				else if(aDis < bDis)
				{
					return -1;
				}
				else
					return 0;
			}
			//根据两个点计算距离，并将距离统一为公里
			private function GetDistance(mp1:MapPoint,mp2:MapPoint):String
			{
				var distance:Number = Math.sqrt((mp1.x - mp2.x)*(mp1.x - mp2.x)*111*111+(mp1.y - mp2.y)*(mp1.y - mp2.y)*111*111);
				
					return distance.toFixed(3).toString();
			}
			
			private function getInfoByLayerID(layerid:Number):XmlLayerInfo
			{
				if(this.layerInfos != null && this.layerInfos.length >0)
				{
					for each( var info:XmlLayerInfo in this.layerInfos)
					{
						if(info.layerID == int(layerid))
						{
							return info;
						}
					}
				}
			
					return null;
			}
			

			protected function btnBuffer_clickHandler(event:MouseEvent):void
			{
				bufferLayer.clear();
				this.anlyseLayer.clear();
				//测试数据
				//if(annlysePoint == null || annlysePoint.x==0 || annlysePoint.y==0)
				//{
					annlysePoint.spatialReference = map.spatialReference;
				//}
					//============
				var distance:Number;
				try
				{
				
					distance = Number(this.txtBufferDistance.text);
				}
				catch( e:Error)
				{
					Alert.show("输入的缓冲距离有错误，请重新输入!","错误提示");
					return;
					
				}
					var bufferParameters:BufferParameters = new BufferParameters();
				bufferParameters.geometries = [annlysePoint];
				bufferParameters.distances = [distance];
				bufferParameters.unit = GeometryService.UNIT_METER;
				bufferParameters.bufferSpatialReference=map.spatialReference;
				bufferParameters.outSpatialReference = map.spatialReference;				
			
				geometrySer.addEventListener(GeometryServiceEvent.BUFFER_COMPLETE, bufferCompleteHandler);
				geometrySer.buffer(bufferParameters);		
			}
			//buffer分析结果
			private function bufferCompleteHandler(event:GeometryServiceEvent):void
			{
				
				anlyseLayer.clear();
				geometrySer.removeEventListener(GeometryServiceEvent.BUFFER_COMPLETE,bufferCompleteHandler);
				for each(var graphic:Polygon in event.result)
				{
				   
					map.extent=graphic.extent.expand(1.2);
					var gc:Graphic = new Graphic();
					gc.geometry = graphic;
					var sym:SimpleFillSymbol = new SimpleFillSymbol();
					var symline:SimpleLineSymbol = new SimpleLineSymbol();
					symline.color = Number(this.lineColor);
					symline.width=Number(this.lineWidth);
					symline.alpha = Number(this.lineAlpha);
					sym.color = Number(this.fillAlpha);
					sym.alpha = Number(this.fillAlpha);
					sym.outline = symline;
					gc.symbol = sym;
					
					bufferLayer.add(gc);
					var identifyParams:IdentifyParameters = new IdentifyParameters();					
					identifyParams.returnGeometry = true;
					identifyParams.spatialReference = map.spatialReference;
					identifyParams.width = map.width;
					identifyParams.height = map.height;
					identifyParams.mapExtent = map.extent;
			
					var layerIDs:Array = new Array();
					if(layerInfos != null && layerInfos.length>0)
					{
						for(var i=0;i< layerInfos.length;i++)
						{
							layerIDs.push((layerInfos[i] as XmlLayerInfo).layerID);
						}
						identifyParams.layerIds = layerIDs;
					}
			
					identifyParams.layerOption = IdentifyParameters.LAYER_OPTION_ALL;
					identifyParams.geometry =graphic;
					identifyParams.tolerance =3;		
					identifyask.execute(identifyParams);
					
					break;
				}
			}

			protected function identifyask_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.message.toString());
			}


			protected function clearImg_clickHandler(event:MouseEvent):void
			{
				if(this.anlyseLayer!=null)
					anlyseLayer.clear();
				if(this.bufferLayer!=null)
					bufferLayer.clear();
				resultValue.initData(new Array());
			}


			protected function datagridImg_clickHandler(event:MouseEvent):void
			{
				resultGroup.height = 200;
				resultGroup.visible = true;
				hcGroup.height = 0;
				hcGroup.visible = false;
			}


			protected function hcImg_clickHandler(event:MouseEvent):void
			{
				resultGroup.height = 0;
				resultGroup.visible = false;
				hcGroup.height =150;
				hcGroup.visible = true;
			}
			private function widgetClosedHandler():void
			{
				if(this.anlyseLayer!=null)
					anlyseLayer.clear();
				if(this.bufferLayer!=null)
					bufferLayer.clear();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<esri:GeometryService id="geometrySer" url="http://yutu567/ArcGIS/rest/services/Geometry/GeometryServer"/>
		<esri:IdentifyTask id="identifyask" concurrency="last"  executeComplete="identifyask_executeCompleteHandler(event)" fault="identifyask_faultHandler(event)"/>
	</fx:Declarations>
	
	<viewer:WidgetTemplate visible="false" id="bufferWidgetTmp" name="缓冲分析" height="100%" width="100%" closed="widgetClosedHandler()">
	<s:VGroup  horizontalAlign="left"  verticalAlign="bottom"  height="100%" width="100%" >
		<s:HGroup  horizontalAlign="center"  >
			<mx:Image id="hcImg" click="hcImg_clickHandler(event)"/>
			<mx:Image id="datagridImg" click="datagridImg_clickHandler(event)"/>
			<mx:Image id="clearImg" click="clearImg_clickHandler(event)"/>
			</s:HGroup>
		<s:VGroup id="hcGroup" visible="true">
			<s:HGroup   >
				<s:Label text="缓冲半径:" width="56"  verticalAlign="bottom" fontSize="13"  height="20" />
				<s:TextInput width="80" id="txtBufferDistance"/>
				<s:Label text="米"  fontSize="13" width="56" height="20" verticalAlign="bottom"/>
				<s:Button id="btnBuffer" label="查询" click="btnBuffer_clickHandler(event)"/>		
			</s:HGroup>
			<s:HGroup     >			
				<s:Label text="图层列表" width="56"  verticalAlign="bottom" fontSize="13"  height="20" />
			</s:HGroup>		
			<s:HGroup>
				<s:VGroup id="listGroup"/>
			</s:HGroup>
		</s:VGroup>
		<s:HGroup id="resultGroup" visible="true" height="0">			
			<BufferAnalyse:BufferResultCanvas id="resultValue" />
		</s:HGroup>
	</s:VGroup>
	</viewer:WidgetTemplate>
	
</viewer:BaseWidget>
