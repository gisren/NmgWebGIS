<?xml version="1.0" encoding="utf-8"?>
<!--
     ////////////////////////////////////////////////////////////////////////////////
     //
     // Copyright (c) 2010 ESRI
     //
     // All rights reserved under the copyright laws of the United States.
     // You may freely redistribute and use this software, with or
     // without modification, provided you include the original copyright
     // and use restrictions.  See use restrictions in the file:
     // <install location>/License.txt
     //
     ////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   borderSkin="{null}"
                   creationComplete="creationCompleteHandler(event)"
                   widgetConfigLoaded="init()" xmlns:LeftController="widgets.elements.LeftController.*">

    <fx:Script>
        <![CDATA[
            import com.esri.viewer.AppEvent;
            import com.esri.viewer.ViewerContainer;
            import com.esri.viewer.WidgetStates;
            import com.esri.viewer.components.HTMLPopup;
            
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;
            
            import spark.components.supportClasses.ItemRenderer;

            private var aboutContent:String;
            private var btnLabel:String = "";
            private var txtareaWidth:Number;
            private var txtareaHeight:Number;

            [Bindable]
            private var labelText:String = "";
            [Bindable]
            private var labelVisible:String = "";

            [Bindable]
            private var widgetItemAC:ArrayCollection;
            [Bindable]
            private var groupWidgetAC:ArrayCollection;
            [Bindable]
            private var title:String;

            private function creationCompleteHandler(event:FlexEvent):void
            {
                if (configData)
                {
                    widgetItemAC = getWidgetItems(configData.widgets);
                    var uiList:Array = configData.viewerUI;

                    ViewerContainer.addEventListener(AppEvent.WIDGET_STATE_CHANGED, widgetStateChangedHandler);
                }
            }

            private function init():void
            {
                if (configXML)
                {
                    aboutContent = configXML.about.content || "";
                    labelText = configXML.about.label || getDefaultString("aboutLabel");
                    labelVisible = configXML.about.visible.toString() || "true";
                    btnLabel = configXML.about.btnlabel || getDefaultString("okLabel");
                    txtareaWidth = configXML.about.width || 500;
                    txtareaHeight = configXML.about.height || 500;
                }
            }

            private function getWidgetItems(widgetList:Array):ArrayCollection
            {
                var menuItems:ArrayCollection = new ArrayCollection;
                var widgetItem:WidgetItem;
                for (var i:int = 0; i < widgetList.length; )
                {
                    if (widgetList[i].grouped)
                    {
                        // grouped
                        var widgetArray:Array = [];
                        var length:Number = widgetList[i].groupLength;
                        for (var k:int = 0; k < length; k++)
                        {
                            widgetArray.push({ widget: widgetList[i + k], open: (widgetList[i].preload && (widgetList[i].preload == "open" || widgetList[i].preload == "minimized")) ? true : false });
                        }
                        widgetItem = new WidgetItem;
                        widgetItem.isGroup = true;
                        widgetItem.label = widgetList[i].groupLabel;
                        widgetItem.icon = widgetList[i].groupIcon;
                        widgetItem.widgets = widgetArray;

                        menuItems.addItem(widgetItem);

                        // move to the next group
                        i = i + length;
                    }
                    else
                    {
						if(widgetList[i].position == "proWorkBar")
						{
							// upgrouped
							widgetItem = new WidgetItem;
							widgetItem.id = widgetList[i].id;
							widgetItem.label = widgetList[i].label;
							widgetItem.icon = widgetList[i].icon;
							widgetItem.pressicon =widgetList[i].pressicon;
							widgetItem.url = widgetList[i].url;
							widgetItem.open = widgetList[i].preload && (widgetList[i].preload == "open" || widgetList[i].preload == "minimized");
							
							menuItems.addItem(widgetItem);
						}

                        // move to the next individual widget
                        i++;
                    }
                }

                return menuItems;
            }

            private function showAbout():void
            {
                HTMLPopup.show(aboutContent, btnLabel, txtareaWidth, txtareaHeight);
            }

            private function widgetItemDG_widgetItemClickHandler(event:Event):void
            {
                var widgetItem:WidgetItem = ItemRenderer(event.target).data as WidgetItem;
//				widgetItem.icon =widgetItem.pressicon;
                if (widgetItem.isGroup)
                {
                    groupWidgetAC = new ArrayCollection();
                    // check the array of widgets if they are open before hand
                    for each (var widgetObj:Object in widgetItem.widgets)
                    {
                        var widgetItem1:WidgetItem = new WidgetItem;
                        widgetItem1.id = widgetObj.widget.id;
                        widgetItem1.label = widgetObj.widget.label;
                        widgetItem1.icon = widgetObj.widget.icon;
                        widgetItem1.url = widgetObj.widget.url;
                        widgetItem1.open = widgetObj.open;

                        groupWidgetAC.addItem(widgetItem1);
                    }
                    widgetList.visible = true;
                }
                else
                {
                    ViewerContainer.dispatchEvent(new AppEvent(AppEvent.WIDGET_RUN, widgetItem.id));
                }
            }

            private function widgetList_widgetItemClickHandler(event:Event):void
            {
                var widgetItem:WidgetItem = ItemRenderer(event.target).data as WidgetItem;
                ViewerContainer.dispatchEvent(new AppEvent(AppEvent.WIDGET_RUN, widgetItem.id));
            }

            [Bindable]
            private var xOver:int;

            private function widgetItemDG_widgetItemMouseOverHandler(event:Event):void
            {
                var pointGlobal:Point = ItemRenderer(event.target).localToGlobal(new Point(0, 0));
                var pointLocal:Point = headerGroup.globalToLocal(pointGlobal); // get the local coordinates where the menuItem will be shown

                xOver = pointLocal.x;

                widgetList.visible = false;
/*                 if (WidgetItem(ItemRenderer(event.target).data).label)
                {
                    menuToolTip.visible = true;
                    menuTitle.text = WidgetItem(ItemRenderer(event.target).data).label;
                } */
            }

            private function widgetStateChangedHandler(event:AppEvent):void
            {
                var data:Object = event.data;
                for (var i:Number = 0; i < widgetItemAC.length; )
                {
                    if (widgetItemAC.getItemAt(i).isGroup)
                    {
                        // make sure to check it for the array of widgets(group) if they are open before hand
                        var widgetFound:Boolean;
                        for each (var widgetObj:Object in widgetItemAC.getItemAt(i).widgets)
                        {
                            if (data.id as Number == widgetObj.widget.id)
                            {
                                widgetFound = true;
                                widgetObj.open = (data.state as String == WidgetStates.WIDGET_OPENED) || (data.state as String == WidgetStates.WIDGET_MINIMIZED);
                                break;
                            }
                        }
                        if (widgetFound)
                        {
                            break;
                        }
                        else
                        {
                            i++;
                        }
                    }
                    else
                    {
                        if (data.id as Number == widgetItemAC.getItemAt(i).id)
                        {
                            widgetItemAC.getItemAt(i).open = (data.state as String == WidgetStates.WIDGET_OPENED) || (data.state as String == WidgetStates.WIDGET_MINIMIZED);
							
							// modify by xxl on 2011.8.16
							if(configData.widgets[widgetItemAC.getItemAt(i).id].pressicon)
							{
								if(widgetItemAC.getItemAt(i).open)
								{
									widgetItemAC.getItemAt(i).icon  = configData.widgets[widgetItemAC.getItemAt(i).id].pressicon;
								}
								else
								{
									widgetItemAC.getItemAt(i).icon  = configData.widgets[widgetItemAC.getItemAt(i).id].icon;
								}
							}
							
                            break;
                        }
                        else
                        {
                            i++;
                        }
                    }
                }
                // check for any grouped widgets
                if (groupWidgetAC && groupWidgetAC.length > 0)
                {
                    for (var j:Number = 0; j < groupWidgetAC.length; )
                    {
                        if (data.id as Number == groupWidgetAC.getItemAt(j).id)
                        {
                            groupWidgetAC.getItemAt(j).open = (data.state as String == WidgetStates.WIDGET_OPENED) || (data.state as String == WidgetStates.WIDGET_MINIMIZED);
                            widgetList.visible = false;
                            break;
                        }
                        else
                        {
                            j++;
                        }
                    }
                }
            }

            private function widgetList_rollOutHandler(event:MouseEvent):void
            {
                widgetList.visible = false;
            }

			
			protected var leftGroupState:String = "expansion";
			
			protected function onSanjiaoImageClick():void
			{
				this.currentState = leftGroupState == "expansion" ? "contraction" : "expansion";
				
				leftGroupState = this.currentState;
			}


			protected function sanjiaoImage_mouseOverHandler(event:MouseEvent):void
			{
				if(this.currentState == "expansion")
				{
					fadeEffect(vborder.alpha, .75);
				}
				
			}


			protected function sanjiaoImage_mouseOutHandler(event:MouseEvent):void
			{
				if(this.currentState == "expansion")
				{
					fadeEffect(vborder.alpha, .2);
				}
			}
			
			private function fadeEffect(fromAlpha:Number, toAlpha:Number):void
			{
				var fade:Fade = new Fade();
				fade.alphaFrom = fromAlpha;
				fade.alphaTo = toAlpha;
				fade.targets = [vborder,vborder2,vborder3,sanjiaoImage];
				fade.duration = 800;
				fade.play();
			}

        ]]>
    </fx:Script>
	
	<viewer:states>
		<s:State name="expansion" />
		<s:State name="contraction" />
	</viewer:states>
	
	<viewer:transitions>
		<s:Transition fromState="*" toState="*" >
			<s:Sequence duration="800" >
				<s:Move target="{headerGroup}" />
				<!--<s:Rotate target="{sanjiaoImage}" />-->
				<s:Fade targets="{[vborder,vborder2,vborder3,sanjiaoImage]}" />
			</s:Sequence>
		</s:Transition>
	</viewer:transitions>
		

    <s:Group id="headerGroup"
             width="100%" height="{widgetItemAC.length*(36+3) + 10}"
			 x.expansion="0"
			 x.contraction="{-headerGroup.width + 12}"
			 >
		
		<s:BorderContainer id ="logoImg" 
						   width="100%"  height="100%" 
						   backgroundAlpha="0" 
						   borderVisible="false"
						   >
	        <mx:VBox id="headerContent" x="0" y="0"
	                 width="100%" 
	                 verticalAlign="middle"
	                 verticalScrollPolicy="off"
					 >	
	            <mx:VBox id="widgetBox"
	                     width="100%" 
	                     horizontalAlign="center"
						 verticalAlign="middle"
						 >
	                <LeftController:WidgetItemDataGroup id="widgetItemDG"
														left="-10"
	                                                    dataProvider="{widgetItemAC}"
	                                                    widgetItemClick="widgetItemDG_widgetItemClickHandler(event)"
	                                                    ><!-- widgetItemMouseOut=""
																widgetItemMouseOver=""-->
	                    <LeftController:layout>
	                        <s:VerticalLayout id = "iconLayer"  
											  paddingLeft="5"
											  paddingRight="10"
											  paddingTop="5"
											  paddingBottom="5"
											  gap="3"
	                                          useVirtualLayout="true"
	                                          verticalAlign="middle"/>
	                    </LeftController:layout>
	                </LeftController:WidgetItemDataGroup>
	            </mx:VBox>
	        </mx:VBox>
	        <s:BorderContainer id="widgetList"
	                           x="{xOver + 4 - widgetListDG.width/2}" y="{headerContent.height}" width="{widgetListDG.width + 4}" height="{widgetListDG.height + 2}"
	                           backgroundColor="{getStyle('contentBackgroundColor')}"
	                           borderColor="{getStyle('color')}"
	                           borderVisible="true"
	                           cornerRadius="3"
	                           rollOut="widgetList_rollOutHandler(event)"
	                           visible="false">
	            <LeftController:WidgetListDataGroup id="widgetListDG"
	                                                  width="150"
	                                                  dataProvider="{groupWidgetAC}"
	                                                  visible="{widgetList.visible}"
	                                                  widgetListItemClick="widgetList_widgetItemClickHandler(event)">
	                <LeftController:layout>
	                    <s:VerticalLayout paddingTop="6"
	                                      useVirtualLayout="true"
	                                      verticalAlign="middle"/>
	                </LeftController:layout>
	            </LeftController:WidgetListDataGroup>
	        </s:BorderContainer>
			
	        <!--<s:filters>
	            <s:DropShadowFilter alpha="0.5"
	                                blurX="10"
	                                blurY="10"/>
	        </s:filters>-->
		</s:BorderContainer>
		
		<s:Rect id="vborder3" 
				alpha.expansion=".2"
				alpha.contraction=".75"
				left="0" right="2" top="1" bottom="1"
				><!--alpha.mouseOver="1" alpha.mouseOut="0.2"-->
			<s:stroke>
				<s:SolidColorStroke color="{getStyle('color')}" weight="2"/>
			</s:stroke>
		</s:Rect>
		
		<s:Rect id="vborder" 
				alpha.expansion=".2"
				alpha.contraction=".75"
				left="0" right="0" top="0" bottom="0"
				>
			<s:stroke>
				<s:SolidColorStroke color="{getStyle('contentBackgroundColor')}" weight="1"/><!---->
			</s:stroke>
		</s:Rect>
		
		<s:Rect id="vborder2" 
				alpha.expansion=".2"
				alpha.contraction=".75"
				left="0" right="-3" top="-2" bottom="-2"
				>
			<s:stroke>
				<s:SolidColorStroke color="{getStyle('color')}" weight="2"/> 
			</s:stroke>
		</s:Rect>
		
		<mx:Image id="sanjiaoImage" 
				  rotation.expansion="0"
				  rotation.contraction="180"
				  alpha.expansion=".2"
				  alpha.contraction=".75"
				  width="20" height="20" 
				  source="assets/yutuImages/widgetIcon/sanjiao.png" 
				  top="{(widgetItemAC.length*(36+3) + 10)/2-10}"
				  right="-10"
				  click="onSanjiaoImageClick()"
				  mouseOver="sanjiaoImage_mouseOverHandler(event)"
				  mouseOut="sanjiaoImage_mouseOutHandler(event)"
				  />
		
		<s:filters>
			<s:DropShadowFilter alpha="0.5"
								blurX="10"
								blurY="10"/>
		</s:filters>
		
    </s:Group>
	
	
</viewer:BaseWidget>
